location ~ /api/v4/groups/(.*)/merge_requests {
    limit_except POST PUT DELETE {
        # For requests that *are not* POST, PUT or DELETE
        proxy_pass $GITLAB_API_URL/api/v4/groups/$1/merge_requests$is_args$args;
    }
    return 404;
}

location ~ /api/v4/projects/(.*)/merge_requests/(.*)/resource_label_events {
    limit_except POST PUT DELETE {
        # For requests that *are not* POST, PUT or DELETE
        proxy_pass $GITLAB_API_URL/api/v4/projects/$1/merge_requests/$2/resource_label_events$is_args$args;
    }
    return 404;
}

location ~ /api/v4/projects/(.*)/merge_requests/(.*)/closes_issues {
    limit_except POST PUT DELETE {
        # For requests that *are not* POST, PUT or DELETE
        proxy_pass $GITLAB_API_URL/api/v4/projects/$1/merge_requests/$2/closes_issues$is_args$args;
    }
    return 404;
}

location ~ /api/v4/projects/(.*)/merge_requests/(.*)/commits {
    limit_except POST PUT DELETE {
        # For requests that *are not* POST, PUT or DELETE
        proxy_pass $GITLAB_API_URL/api/v4/projects/$1/merge_requests/$2/commits$is_args$args;
    }
    return 404;
}

location ~ /api/v4/projects/(.*)/merge_requests/(.*) {
    # The project can be accessed from its ID or URL-encoded path.
    # In very few cases Echoes uses the URL-encoded path.
    # Nginx needs to re-encode the decoded part in order to satisfy the GitLab API expectations.
    # Using the rewrite directive is the way to do so.
    rewrite ^ /api/v4/projects/$1/merge_requests/$2$is_args$args;
    limit_except POST DELETE {
        # For requests that *are not* POST or DELETE
        proxy_pass $GITLAB_API_URL;
    }
    return 404;
}

location ~ /api/v4/projects/(.*)/merge_requests {
    limit_except POST PUT DELETE {
        # For requests that *are not* POST, PUT or DELETE
        proxy_pass $GITLAB_API_URL/api/v4/projects/$1/merge_requests$is_args$args;
    }
    return 404;
}
